// Responsive sizes
@mixin phone {
	@media (max-width:$screen-phone) {
		@content;
	}
}

@mixin tablet {
	@media (min-width:$screen-phone) and (max-width:$screen-desktop) {
		@content;
	}
}

@mixin desktop {
	@media (min-width:$screen-desktop) {
		@content;
	}
}

@mixin screen-lg-desktop {
	@media (min-width:$screen-lg-desktop) {
		@content;
	}
}

@mixin portrait {
	@media screen and (min-aspect-ratio:9/16) {
		@content;
	}
}

@mixin phone-to-tablet {
	@include tablet {
		@content;
	}
	@include phone {
		@content;
	}
}






// Default mixins for application


// Default image settings when used as a css background
@mixin image_background {
	background-color:$gray-4-color;
	background-repeat:no-repeat;
	background-size:cover;
	background-position:0% 50%;
}


// Default image for Dropzone
@mixin image_background_Dropzone {
    background-image:url("../images/spritemap@2x.png");
    background-position:center center;
    background-repeat:no-repeat;
    background-size:428px auto;
}

// Default image for Dropzone
@mixin image_background_DropzoneMessage {
    background-image:url("../images/uploadsprite.svg");
    background-position:center center;
    background-repeat:no-repeat;
    background-size:428px auto;
}

// Default image settings for Facebook
@mixin image_background_social_facebook {
  	background-image:url('../images/icons/social-facebook.svg');
}
@mixin image_background_social_facebook2 {
  	background-image:url('../images/icons/category-facebook.svg') !important;
}

// Default image settings for Twitter
@mixin image_background_social_twitter {
  	background-image:url('../images/icons/social-twitter.svg');
}
@mixin image_background_social_twitter2 {
  	background-image:url('../images/icons/category-twitter.svg');
}

// Default image settings for Googleplus
@mixin image_background_social_googleplus {
  	background-image:url('../images/icons/social-google-plus.svg');
}

// Default image settings for Instagram
@mixin image_background_social_instagram {
  	background-image:url('../images/icons/category-instagram.svg');
}
@mixin image_background_social_instagram2 {
  	background-image:url('../images/icons/category-instagram.svg');
}

// Default image settings for Youtube
@mixin image_background_social_youtube {
  	background-image:url('../images/icons/category-youtube.svg');
}

// Default image settings for Vimeo
@mixin image_background_social_vimeo {
  	background-image:url('../images/icons/category-vimeo.svg');
}

// Default image settings for Vimeo
@mixin image_background_social_news {
  	background-image: url(../images/icons/category-news.svg);
}


// Default image settings for Like
@mixin image_background_social_likes {
  	background-image:url('../images/icons/social-like.svg');
}

// Default image settings for email
@mixin image_background_social_email {
  	background-image:url('../images/icons/mail.svg');
}
// Default image settings for Comment
@mixin image_background_social_comment {
  	background-image:url('../images/icons/social-comment.svg');
}

// Default image settings for Comment
@mixin image_background_social_share {
  	background-image:url('../images/icons/social-share.svg');
}

// Base font
@mixin base_font {
	color:$base-color;
	font-family:$base-font-family;
	letter-spacing:0.5px;
}


@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
}

// Single side border-radius

@mixin border-top-radius($radius) {
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-top-right-radius: $radius;
	border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
	-webkit-border-bottom-right-radius: $radius;
	border-bottom-right-radius: $radius;
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
	-webkit-border-bottom-left-radius: $radius;
	border-bottom-left-radius: $radius;
	 -webkit-border-top-left-radius: $radius;
	 border-top-left-radius: $radius;
}


@mixin box-shadow($shadow) {
  -webkit-box-shadow:$shadow;
     -moz-box-shadow:$shadow;
      -ms-box-shadow:$shadow;
          box-shadow:$shadow;
}


@mixin border($border) {
  	border:$border;
}

@mixin opacity($opacity) {
	  opacity:$opacity;
	  $opacity-ie:$opacity * 100;
	  filter:alpha(opacity=$opacity-ie);
}


/* Padding */
@mixin padding($padding) {
  	padding:$padding;
}
@mixin padding-top($padding-top) {
  	padding-top:$padding-top;
}
@mixin padding-right($padding-right) {
  	padding-right:$padding-right;
}
@mixin padding-bottom($padding-bottom) {
  	padding-bottom:$padding-bottom;
}
@mixin padding-left($padding-left) {
  	padding-left:$padding-left;
}

/* Transition */
@mixin transition($transition) {
	transition: all 0.3s ease-in;
	-moz-transition: all 0.3s ease-in;
	-o-transition: all 0.3s ease-in;
	-webkit-transition: all 0.3s ease-in;
	-ms-transition: all 0.3s ease-in;
}

/* Sizes */
@mixin size($width, $height: $width) {
  	width: $width;
  	height: $height;
}
@mixin min-size($min-width, $min-height: $min-width) {
  	min-width: $min-width;
  	min-height: $min-height;
}
@mixin max-size($max-width, $max-height: $max-width) {
  	max-width: $max-width;
  	max-height: $max-height;
}

@mixin alpha-attribute($attribute, $color, $background) {
	$percent: alpha($color) * 100%;
	$opaque: opacify($color, 1);
	$solid-color: mix($opaque, $background, $percent);
	#{$attribute}: $solid-color;
	#{$attribute}: $color;
}

@mixin alpha-background-color($color, $background) {
	$percent: alpha($color) * 100%;
	$opaque: opacify($color, 1);
	$solid-color: mix($opaque, $background, $percent);
	background-color: $solid-color;
	background-color: $color;
}

/* Gradient Mixin */
/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	background:nth(nth($color-stops, 1), 1); /* Old browsers */
	background:-moz-linear-gradient(legacy-direction($direction), $color-stops); /* FF3.6-15 */
  	background:-webkit-linear-gradient(legacy-direction($direction), $color-stops); /* Chrome10-25,Safari5.1-6 */
  	background:linear-gradient($direction, $color-stops); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr="#{$direction}", EndColorStr="#{$color-stops}"); /* IE6-9 */
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


// Image Cover Size
@mixin background-size($background-size) {
	-webkit-background-size:$background-size; /* Chrome, Safari, Opera */
	   -moz-background-size:$background-size; /* Mozilla Firefox */
	    -ms-background-size:$background-size; /* IE 9 */
		 -o-background-size:$background-size;
		    background-size:$background-size;
}


// Transform
@mixin transform($transforms) {
	-webkit-transform:$transforms; /* Chrome, Safari, Opera */
	   -moz-transform:$transforms; /* Mozilla Firefox */
	     -o-transform:$transforms;
	    -ms-transform:$transforms; /* IE 9 */
            transform:$transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	 @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
	-webkit-transform-origin:$origin; /* Chrome, Safari, Opera */
       -moz-transform-origin:$origin; /* Mozilla Firefox */
	     -o-transform-origin:$origin;
	    -ms-transform-origin:$origin; /* IE 9 */
            transform-origin:$origin;
}


/* Touch Scroll */
@mixin overflow-scrolling($overflow-scrolling) {
	-webkit-overflow-scrolling:$overflow-scrolling;
	-moz-overflow-scrolling:$overflow-scrolling;
	-ms-overflow-scrolling:$overflow-scrolling;
	-o-overflow-scrolling:$overflow-scrolling;
	overflow-scrolling:$overflow-scrolling;
}

/* Transition Delay */
@mixin transition-delay($transition-delay) {
	transition-delay:0.3s;
	-moz-transition-delay:0.3s;
	-o-transition-delay:0.3s;
	-webkit-transition-delay:0.3s;
	-ms-transition-delay:0.3s;
}



// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check:http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes

//----------------------------------------------------------------------

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display:flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display:-webkit-box;
	display:-webkit-flex;
	display:-moz-flex;
	display:-ms-flexbox;
	display:flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display:-webkit-inline-box;
	display:-webkit-inline-flex;
	display:-moz-inline-flex;
	display:-ms-inline-flexbox;
	display:inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values:row | row-reverse | column | column-reverse
// Default:row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value:row) {
	@if $value == row-reverse {
		-webkit-box-direction:reverse;
		-webkit-box-orient:horizontal;
	} @else if $value == column {
		-webkit-box-direction:normal;
		-webkit-box-orient:vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction:reverse;
		-webkit-box-orient:vertical;
	} @else {
		-webkit-box-direction:normal;
		-webkit-box-orient:horizontal;
	}
	-webkit-flex-direction:$value;
	-moz-flex-direction:$value;
	-ms-flex-direction:$value;
	flex-direction:$value;
}
	// Shorter version:
	@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values:nowrap | wrap | wrap-reverse
// Default:nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value:nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap:$value;
	-moz-flex-wrap:$value;
	@if $value == nowrap {
		-ms-flex-wrap:none;
	} @else {
		-ms-flex-wrap:$value;
	}
	flex-wrap:$value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values:<flex-direction> | <flex-wrap>
// Default:row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values:(row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow:$values;
	-moz-flex-flow:$values;
	-ms-flex-flow:$values;
	flex-flow:$values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default:0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int:0) {
	-webkit-box-ordinal-group:$int + 1;
	-webkit-order:$int;
	-moz-order:$int;
	-ms-flex-order:$int;
	order:$int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default:0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int:0) {
	-webkit-box-flex:$int;
	-webkit-flex-grow:$int;
	-moz-flex-grow:$int;
	-ms-flex-positive:$int;
	flex-grow:$int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default:1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int:1) {
	-webkit-flex-shrink:$int;
	-moz-flex-shrink:$int;
	-ms-flex-negative:$int;
	flex-shrink:$int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values:Like "width"
// Default:auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value:auto) {
	-webkit-flex-basis:$value;
	-moz-flex-basis:$value;
	-ms-flex-preferred-size:$value;
	flex-basis:$value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length:the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values:none | <flex-grow> <flex-shrink> || <flex-basis>
// Default:See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg:1, $fs:null, $fb:null) {

	// Set a variable to be used by box-flex properties
	$fg-boxflex:$fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex:nth($fg, 1);
	}

	-webkit-box-flex:$fg-boxflex;
	-webkit-flex:$fg $fs $fb;
	-moz-box-flex:$fg-boxflex;
	-moz-flex:$fg $fs $fb;
	-ms-flex:$fg $fs $fb;
	flex:$fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note:'space-*' values not supported in older syntaxes.
//
// Values:flex-start | flex-end | center | space-between | space-around
// Default:flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value:flex-start) {
	@if $value == flex-start {
		-webkit-box-pack:start;
		-ms-flex-pack:start;
	} @else if $value == flex-end {
		-webkit-box-pack:end;
		-ms-flex-pack:end;
	} @else if $value == space-between {
		-webkit-box-pack:justify;
		-ms-flex-pack:justify;
	} @else if $value == space-around {
		-ms-flex-pack:distribute;
	} @else {
		-webkit-box-pack:$value;
		-ms-flex-pack:$value;
	}
	-webkit-justify-content:$value;
	-moz-justify-content:$value;
	justify-content:$value;
}
	// Shorter version:
	@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values:flex-start | flex-end | center | baseline | stretch
// Default:stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value:stretch) {
	@if $value == flex-start {
		-webkit-box-align:start;
		-ms-flex-align:start;
	} @else if $value == flex-end {
		-webkit-box-align:end;
		-ms-flex-align:end;
	} @else {
		-webkit-box-align:$value;
		-ms-flex-align:$value;
	}
	-webkit-align-items:$value;
	-moz-align-items:$value;
	align-items:$value;
}

//----------------------------------

// Flexbox Align Self
//
// Values:auto | flex-start | flex-end | center | baseline | stretch
// Default:auto

@mixin align-self($value:auto) {
	// No Webkit Box Fallback.
	-webkit-align-self:$value;
	-moz-align-self:$value;
	@if $value == flex-start {
		-ms-flex-item-align:start;
	} @else if $value == flex-end {
		-ms-flex-item-align:end;
	} @else {
		-ms-flex-item-align:$value;
	}
	align-self:$value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values:flex-start | flex-end | center | space-between | space-around | stretch
// Default:stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value:stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content:$value;
	-moz-align-content:$value;
	@if $value == flex-start {
		-ms-flex-line-pack:start;
	} @else if $value == flex-end {
		-ms-flex-line-pack:end;
	} @else {
		-ms-flex-line-pack:$value;
	}
	align-content:$value;
}
